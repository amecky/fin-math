
import "math"

// https://school.stockcharts.com/doku.php?id=chart_analysis:candlestick_pattern_dictionary#harami

func FindCandleStickPatterns(prices *model.DataFrame) []model.CandleStickPattern {
	var ret []model.CandleStickPattern
	// candles := model.NewDataFrame("Candles", []string{"BodySize", "BodyPos", "RelBodySize", "RelAvg", "Upper", "Lower", "Trend", "Spread", "RelSpread", "High", "Low", "Open", "Close"})
	candles := Candles(prices, 21)
	for i := 0; i < candles.Rows; i++ {
		first := candles.DataRows[i]
		pattern := model.CandleStickPattern{
			Type: model.UNKNOWN,
		}

		//
		// Single bar patterns
		//
		if first.Get("Trend") == 1 && first.Get("Lower") >= 66.0 {
			pattern.Type = model.HAMMER
			pattern.Timestamp = first.Timestamp

		}
		if first.Get("Trend") == -1 && first.Get("Upper") >= 66.0 {
			pattern.Type = model.SHOOTING_STAR
			pattern.Timestamp = first.Timestamp

		}

		if i < candles.Rows-1 {
			second := candles.DataRows[i+1]
			if first.Get("Trend") != second.Get("Trend") {
				if second.Get("Trend") == 1 {
					if second.Get("Close") > first.Get("Open") && second.Get("Open") < first.Get("Close") {
						pattern.Type = model.BULLISH_ENGULFING

						pattern.Timestamp = second.Timestamp
					}
				}
				if second.Get("Trend") == -1 {
					if second.Get("Close") < first.Get("Open") && second.Get("Open") > first.Get("Close") {
						pattern.Type = model.BEARISH_ENGULFING
						pattern.Timestamp = second.Timestamp

					}
				}
			}

			if first.Get("RelBodySize") < 10.0 && math.Abs(first.Get("Upper")-first.Get("Lower")) < 20.0 {
				// FIXME: check if 20% is probably too much
				pattern.Type = model.DOJI

				pattern.Timestamp = first.Timestamp
			}

			

			// The Bearish On Neck Pattern
			// The bearish On Neck pattern is a reversal configuration where a bullish candle is printed and
			// followed by a bearish candle that gaps higher at the opening but closes at the closing price of the first candle.
			if first.Get("Trend") == 1 && second.Get("Trend") == -1 {
				d := math.Abs(1.0-first.Get("Close")/second.Get("Close")) * 100.0
				if d < 0.25 {
					//fmt.Println("BEA_O_N", first.Timestamp, "c1", first.Get("Close"), "c2", second.Get("Close"), "d", d)
					pattern.Type = model.BEARISH_ON_NECK

					pattern.Timestamp = second.Timestamp
				}
			}
			// The Bullish On Neck Pattern
			// The bullish On Neck pattern is a reversal configuration where a bearish candle is printed and
			// followed by a bullish candle that gaps lower at the opening but closes at the closing price of the first candle.
			if first.Get("Trend") == -1 && second.Get("Trend") == 1 {
				d := math.Abs(1.0-first.Get("Open")/second.Get("Open")) * 100.0
				if d < 0.25 {
					//fmt.Println("BU_O_N", first.Timestamp, "o1", first.Get("Open"), "o2", second.Get("Open"), "d", d)
					pattern.Type = model.BULLISH_ON_NECK

					pattern.Timestamp = second.Timestamp
				}
			}

			if i < candles.Rows-2 {
				third := candles.DataRows[i+2]
				//
				// Triple bar patterns
				//
				/*
					Three White Soldiers
					A bullish reversal pattern consisting of three consecutive long white bodies.
					Each should open within the previous body and the close should be near the high of the day.
				*/
				if first.Get("Trend") == 1 && second.Get("Trend") == 1 && third.Get("Trend") == 1 && first.Get("Open") < second.Get("Open") && second.Get("Open") < third.Get("Open") && first.Get("Close") < second.Get("Close") && second.Get("Close") < third.Get("Close") {
					pattern.Type = model.THREE_WHITE_SOLDIERS

					pattern.Timestamp = third.Timestamp
				}

				/*
					Three Black Crows
					A bearish reversal pattern consisting of three consecutive long black bodies
					where each day closes at or near its low and opens within the body of the previous day.
				*/
				if first.Get("Trend") == -1 && second.Get("Trend") == -1 && third.Get("Trend") == -1 && second.Get("Open") < first.Get("Close") {
					if third.Get("Open") < second.Get("Close") && first.Get("Close") < second.Get("Close") && second.Get("Close") < third.Get("Close") {
						// FIXME: all three should have big bodies
						pattern.Type = model.THREE_BLACK_CROWS

						pattern.Timestamp = third.Timestamp
					}
				}

				if first.Get("Trend") == -1 && third.Get("Trend") == 1 && second.Get("RelBodySize") <= 20.0 && third.Get("Close") > first.Get("Mid") && first.Get("RelBodySize") >= 30.0 && third.Get("RelBodySize") >= 30.0 {
					pattern.Type = model.MORNING_STAR

					pattern.Timestamp = third.Timestamp
				}
				if first.Get("Trend") == 1 && third.Get("Trend") == -1 && second.Get("RelBodySize") <= 20.0 && third.Get("Close") < first.Get("Mid") && first.Get("RelBodySize") >= 30.0 && third.Get("RelBodySize") >= 30.0 {
					pattern.Type = model.EVENING_STAR

					pattern.Timestamp = third.Timestamp
				}

				if first.Get("Trend") == -1 && third.Get("Trend") == 1 && first.Get("RelBodySize") > 60.0 && math.Abs(second.Get("Open")-second.Get("Close")) < 10.0 && first.Get("Close") > second.Get("Close") && second.Get("Open") < third.Get("Close") {
					pattern.Type = model.EVENING_STAR

					pattern.Timestamp = third.Timestamp
				}
				/* Morning_DOJI_STAR
								The first candlestick should be big and bearish.
				The second one should be a Doji candle closing below the previous oneâ€™s body.
				The third candlestick should open above the Doji Star pattern and be bullish. Then we can expect a price reversal.
				*/

				if i < candles.Rows-3 {
					fourth := candles.DataRows[i]
					// Bullish Tower Top
					if first.Get("Trend") == -1 && second.Get("Trend") == -1 && third.Get("Trend") == 1 && fourth.Get("Trend") == 1 && first.Get("Hgih") > second.Get("High") && first.Get("High") > third.Get("High") && first.Get("Low") < second.Get("Low") && first.Get("Low") < third.Get("Low") {
						pattern.Type = model.BULLISH_TOWER_TOP

						pattern.Timestamp = fourth.Timestamp
					}
					/* 0 = Open 1 = High 2 = Low 3 = Close
						body = 0.0005
							# Bullish Tower Top
					       if abs(Data[i - 2, Open] - Data[i - 2, Close]) >= body and Data[i - 2, Close] < Data[i - 2, Open]

						   and abs(Data[i, Close] - Data[i, Open]) >= body and Data[i, Close] > Data[i, Open]

						   and Data[i - 1, High] < Data[i, High] and Data[i - 1, High] < Data[i - 2, High]

						   and Data[i - 1, Low] > Data[i, Low] and Data[i - 1, Low] > Data[i - 2, Low]:

					                Data[i, 6] = 1

					       # Bearish Tower Top
					       elif abs(Data[i - 2, 0] - Data[i - 2, 3]) >= body and Data[i - 2, 3] > Data[i - 2, 0] and abs(Data[i, 3] - Data[i, 0]) >= body and Data[i, 3] < Data[i, 0] and Data[i - 1, 1] < Data[i, 1] and Data[i - 1, 1] < Data[i - 2, 1] and Data[i - 1, 2] > Data[i, 2] and Data[i - 1, 2] > Data[i - 2, 2]:

					*/
				}
			}
		}
		if pattern.Type != model.UNKNOWN {
			ret = append(ret, pattern)
		}
	}
	return ret
}
